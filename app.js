// Generated by CoffeeScript 1.3.1
(function() {
  var app, gm, http, im, port, resize, url;

  http = require('http');

  url = require('url');

  gm = require('gm');

  app = require('express').createServer();

  im = gm.subClass({
    imageMagick: true
  });

  resize = function(request, response) {
    var dimension, fileOptions, fileRequest, height, parsedPath, width, _ref;
    parsedPath = url.parse(new Buffer(request.params.path, 'base64').toString());
    _ref = (function() {
      var _i, _len, _ref, _results;
      _ref = request.params.size.split('x', 2);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dimension = _ref[_i];
        _results.push(+dimension);
      }
      return _results;
    })(), width = _ref[0], height = _ref[1];
    fileOptions = {
      host: parsedPath.hostname,
      port: parsedPath.port,
      path: parsedPath.pathname,
      method: 'GET'
    };
    fileRequest = http.request(fileOptions, function(fileResponse) {
      return im(fileResponse).size({
        bufferStream: true
      }, function(err, size) {
        var cols, rows, scale, x, _ref1, _ref2;
        _ref1 = [size.width, size.height], cols = _ref1[0], rows = _ref1[1];
        if (width !== cols || height !== rows) {
          scale = Math.max.apply(Math, [width / cols, height / rows]);
          _ref2 = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = [cols, rows];
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              x = _ref2[_i];
              _results.push(Math.round(scale * (x + 0.5)));
            }
            return _results;
          })(), cols = _ref2[0], rows = _ref2[1];
          this.resize(cols, rows);
        }
        this.gravity('Center').background('rgba(255,255,255,0.0)');
        if (cols !== width || rows !== height) {
          this.extent(width, height);
        }
        return this.stream(function(err, stdout, stderr) {
          return stdout.pipe(response);
        });
      });
    });
    return fileRequest.end();
  };

  app.get('/:path/size/:size', resize);

  port = process.env.PORT || 3000;

  app.listen(port, function() {
    return console.log("Listening on " + port);
  });

}).call(this);
